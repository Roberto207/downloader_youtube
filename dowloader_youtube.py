#!/usr/bin/env python3

"""
YouTube Video Downloader
Baixa v√≠deos do YouTube com alta qualidade de v√≠deo e √°udio.
"""

import yt_dlp
import os
import sys
from pathlib import Path


class YouTubeDownloader:
    def __init__(self, output_dir="downloads"):
        """
        Inicializa o downloader do YouTube.
        
        Args:
            output_dir (str): Diret√≥rio onde os v√≠deos ser√£o salvos
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def download_video(self, url, quality="best", audio_only=False, video_only=False):
        """
        Baixa um v√≠deo do YouTube.
        
        Args:
            url (str): URL do v√≠deo do YouTube
            quality (str): Qualidade do v√≠deo ('best', 'worst', ou formato espec√≠fico)
            audio_only (bool): Se True, baixa apenas o √°udio
            video_only (bool): Se True, baixa apenas o v√≠deo (sem √°udio)
        
        Returns:
            bool: True se o download foi bem-sucedido, False caso contr√°rio
        """
        
        # Configura√ß√µes base do yt-dlp
        ydl_opts = {
            'outtmpl': str(self.output_dir / '%(title)s.%(ext)s'),
            'writeinfojson': True,  # Salva metadados
            #'writesubtitles': True,  # Baixa legendas se dispon√≠veis
            #'writeautomaticsub': True,  # Baixa legendas autom√°ticas
        }
        
        # Configura√ß√µes de formato baseadas nas op√ß√µes
        if audio_only:
            ydl_opts['format'] = 'bestaudio/best'
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '320',
            }]
        elif video_only:
            ydl_opts['format'] = 'bestvideo/best'
        else:
            # Melhor qualidade de v√≠deo + √°udio
            if quality == "best":
                ydl_opts['format'] = 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best[ext=mp4]/best'
            else:
                ydl_opts['format'] = quality
            
            # Merge v√≠deo e √°udio em MP4
            ydl_opts['merge_output_format'] = 'mp4'
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # Extrai informa√ß√µes do v√≠deo
                info = ydl.extract_info(url, download=False)
                title = info.get('title', 'V√≠deo sem t√≠tulo')
                duration = info.get('duration', 0)
                uploader = info.get('uploader', 'Desconhecido')
                
                print(f"\nüìπ T√≠tulo: {title}")
                print(f"üë§ Canal: {uploader}")
                print(f"‚è±Ô∏è  Dura√ß√£o: {duration // 60}:{duration % 60:02d}")
                print(f"üìÅ Salvando em: {self.output_dir}")
                print("\nüîÑ Iniciando download...")
                
                # Faz o download
                ydl.download([url])
                print(f"\n‚úÖ Download conclu√≠do com sucesso!")
                return True
                
        except Exception as e:
            print(f"\n‚ùå Erro durante o download: {e}")
            return False
    
    def download_playlist(self, url, quality="best"):
        """
        Baixa uma playlist inteira do YouTube.
        
        Args:
            url (str): URL da playlist do YouTube
            quality (str): Qualidade dos v√≠deos
        
        Returns:
            bool: True se todos os downloads foram bem-sucedidos
        """
        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best[ext=mp4]/best',
            'outtmpl': str(self.output_dir / '%(playlist_title)s/%(title)s.%(ext)s'),
            'merge_output_format': 'mp4',
            'writeinfojson': True,
        }
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                print("üîÑ Baixando playlist...")
                ydl.download([url])
                print("‚úÖ Playlist baixada com sucesso!")
                return True
        except Exception as e:
            print(f"‚ùå Erro ao baixar playlist: {e}")
            return False
    
    def get_video_info(self, url):
        """
        Obt√©m informa√ß√µes sobre um v√≠deo sem baix√°-lo.
        
        Args:
            url (str): URL do v√≠deo do YouTube
        
        Returns:
            dict: Informa√ß√µes do v√≠deo
        """
        ydl_opts = {'quiet': True}
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                return {
                    'title': info.get('title'),
                    'uploader': info.get('uploader'),
                    'duration': info.get('duration'),
                    'view_count': info.get('view_count'),
                    'upload_date': info.get('upload_date'),
                    'description': info.get('description', '')[:200] + '...'
                }
        except Exception as e:
            print(f"Erro ao obter informa√ß√µes: {e}")
            return None


def main():
    """Fun√ß√£o principal com interface de linha de comando."""
    print("üé¨ YouTube Video Downloader")
    print("=" * 40)
    
    downloader = YouTubeDownloader()
    
    while True:
        print("\nOp√ß√µes:")
        print("1. Baixar v√≠deo")
        print("2. Baixar apenas √°udio")
        print("3. Baixar playlist")
        print("4. Obter informa√ß√µes do v√≠deo")
        print("5. Sair")
        
        choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
        
        if choice == "1":
            url = input("URL do v√≠deo: ").strip() #aqui onde colocamos a url q queremos
            if url:
                downloader.download_video(url)
        
        elif choice == "2":
            url = input("URL do v√≠deo: ").strip()
            if url:
                downloader.download_video(url, audio_only=True)
        
        elif choice == "3":
            url = input("URL da playlist: ").strip()
            if url:
                downloader.download_playlist(url)
        
        elif choice == "4":
            url = input("URL do v√≠deo: ").strip()
            if url:
                info = downloader.get_video_info(url)
                if info:
                    print(f"\nüìπ T√≠tulo: {info['title']}")
                    print(f"üë§ Canal: {info['uploader']}")
                    print(f"‚è±Ô∏è  Dura√ß√£o: {info['duration'] // 60 if info['duration'] else 0}:{info['duration'] % 60 if info['duration'] else 0:02d}")
                    print(f"üëÄ Visualiza√ß√µes: {info['view_count']:,}" if info['view_count'] else "üëÄ Visualiza√ß√µes: N/A")
                    print(f"üìÖ Data de upload: {info['upload_date']}")
                    print(f"üìù Descri√ß√£o: {info['description']}")
        
        elif choice == "4":
            print("üëã At√© logo!")
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")


if __name__ == "__main__":
    main()


